import "utils/pack/u32/nonStrictUnpack256.zok" as unpack
import "utils/pack/u32/pack256.zok" as pack
import "hashes/sha256/1024bit.zok" as sha256of1024

// Inputs for main are:
// amount: the amount contained in the commitment (public)
// nullifier: the nullifier for the commitment (public)
// root: the Merkle root (public)
// secretKey: the secret key for the commitment (private)
// random:  token random nonce (private)
// path: the Merkle path for the commitment (private)

def main(field[3] publicInput, private field secretKey, private field random, private field[32] path) -> bool:

	// public input information 
	field amount = publicInput[0]
    field nullifier = publicInput[1]
    field root = publicInput[2]

	// nullifier = H(amount|secretKey|random)
	u32[8] amountU32 = unpack(amount)
	u32[8] secretKeyU32 = unpack(secretKey)
	u32[8] randomU32 = unpack(random)
	field temp = 0
	u32[8] padding = unpack(temp)

	u32[8] nullifierResultU32 = sha256of1024(amountU32, secretKeyU32, randomU32, padding)
	field nullifierResult = pack(nullifierResultU32)

	// publicKey = H(secretKey)
	u32[8] publicKeyU32 = sha256of1024(secretKeyU32, padding, padding, padding)

	// commitment = H(amount|publicKey|random)
	u32[8] commitmentU32 = sha256of1024(amountU32, publicKeyU32, randomU32, padding)

	// Prove that the commitment is in the Merkle tree
	u32[8] hash = commitmentU32
	for field i in 0..32 do
		hash = sha256of1024(hash, unpack(path[i]), padding, padding)
	endfor
	field rootHash = pack(hash)

	return root == rootHash && nullifier == nullifierResult 

