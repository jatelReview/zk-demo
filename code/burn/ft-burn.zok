import "hashes/mimc7/constants.zok" as constants

def mimc7Hash(field x_in, field k) -> field:
    field[91] c = constants()
    field r = 0
    for field i in 0..91 do
        field t = if i == 0 then k+x_in else k + r + c[i] fi
        field t2 = t * t
        field t4 = t2 * t2
        r = t2 * t4 * t
    endfor
    return r + x_in

def mimc1(field one) -> field:
    field r = 0
    field h = mimc7Hash(one, r)
    r = r + one + h
    return r

def mimc2(field[2] input) -> field:
    field r = 0
    for field i in 0..2 do
        field h = mimc7Hash(input[i], r)
        r = r + input[i] + h
    endfor
    return r

def mimc3(field[3] input) -> field:
    field r = 0
    for field i in 0..3 do
        field h = mimc7Hash(input[i], r)
        r = r + input[i] + h
    endfor
    return r

// Inputs for main are:
// amount: the amount contained in the commitment (public)
// nullifier: the nullifier for the commitment (public)
// root: the Merkle root (public)
// secretKey: the secret key for the commitment (private)
// random:  token random nonce (private)
// path: the Merkle path for the commitment (private)

def main(field[3] publicInput, private field secretKey, private field random, private field[32] path) -> bool:

	// public input information 
	field amount = publicInput[0]
    field nullifier = publicInput[1]
    field root = publicInput[2]

	// nullifier = H(secretKey|random)
	field[2] input2 = [secretKey, random]
	field nullifierResult = mimc2(input2)

	// publicKey = H(secretKey)
	field publicKey = mimc1(secretKey)

	// commitment = H(amount|publicKey|random)
	field[3] input3 = [amount, publicKey, random]
	field commitment = mimc3(input3)

	// Prove that the commitment is in the Merkle tree
	field rootHash = commitment
	for field i in 0..32 do
		input2 = [rootHash, path[i]]
		rootHash = mimc2(input2)
	endfor

	return root == rootHash && nullifier == nullifierResult 

